---
description: 구현하는데 도움이 필요하면 참고할 것
globs: 
alwaysApply: false
---
# LaTeX to HWP 변환 Q&A

## Q1: LaTeX를 HWP 수식으로 변환하는 방법

> 수학 수식이 섞여있는 LaTeX를 인식해서, HWP 내에서 지원하는 수식 입력 기능을 활용하여서 HWP 형식으로 변환하는 프로그램을 만들고 싶어. 어떻게 활용해야 할까?

LaTeX 수식을 HWP 수식으로 변환하는 프로그램을 만들려면 `pyhwpx` 라이브러리를 활용하는 것이 좋습니다. 핵심 접근법은 다음과 같습니다:

### 구현 방안

1. **LaTeX → MathML 변환**: `latex2mathml`과 같은 외부 라이브러리를 사용하여 LaTeX 수식을 MathML 형식으로 변환
2. **MathML → HWP 변환**: pyhwpx의 `import_mathml()` 메서드를 사용하여 변환된 MathML을 HWP 수식으로 삽입
3. **일괄 처리**: 문서 내 모든 LaTeX 수식을 순차적으로 처리합니다.

### 주요 기능 및 코드 예시

`pyhwpx`는 MathML 형식을 통한 수식 변환을 지원합니다. `import_mathml()` 메서드를 사용하면 MathML 파일을 HWP 수식으로 직접 삽입할 수 있습니다.

```python
from pyhwpx import Hwp
# from latex2mathml import converter # 예시 라이브러리

# 1. LaTeX 수식을 MathML로 변환
# latex_string = "\\frac{a}{b}"
# mathml_string = converter.convert(latex_string)

# # MathML을 파일로 저장하거나 직접 전달 (라이브러리 지원에 따라 다름)
# with open("equation.mml", "w") as f:
#     f.write(mathml_string)

hwp = Hwp()
# MathML을 HWP에 삽입
hwp.import_mathml("equation.mml")
```

## Q2: LaTeX에서 한글과 수식이 섞인 경우 처리 방법

> 나 궁금한게, LaTeX에는 수식 외에 한글같은것도 포함되어 있거든. 예시로 아래와 같아. 
> 
> 1. \( \left(\frac{4}{2^{\sqrt{2}}}\right)^{2+\sqrt{2}} \) 의 값은? [2점] 
> (1) \( \frac{1}{4} \) (2) \( \frac{1}{2} \) (3) 1 (4) 2 (5) 4 
> 
> 이게 MathML로 변환한다고 하면 일반 한글은 어떻게 적용되는거야?

LaTeX 문서에서 수식과 일반 텍스트가 섞여있는 경우, 텍스트 파싱과 순차적 처리가 필요합니다.

### 해결 방안

#### 1. 텍스트 파싱 및 분리

```python
import re
from pyhwpx import Hwp

def parse_latex_content(latex_text):
    # 인라인 수식 \( ... \) 패턴 찾기
    inline_math_pattern = r'\\\((.*?)\\\)'
    # 블록 수식 \[ ... \] 패턴도 필요시 추가
    
    parts = []
    last_end = 0
    
    for match in re.finditer(inline_math_pattern, latex_text):
        # 수식 앞의 일반 텍스트
        if match.start() > last_end:
            text_part = latex_text[last_end:match.start()]
            parts.append(('text', text_part))
        
        # 수식 부분
        math_content = match.group(1)
        parts.append(('math', math_content))
        last_end = match.end()
    
    # 마지막 텍스트 부분
    if last_end < len(latex_text):
        parts.append(('text', latex_text[last_end:]))
    
    return parts
```

#### 2. HWP 문서 구성

```python
def create_hwp_document(latex_content):
    hwp = Hwp()
    parts = parse_latex_content(latex_content)
    
    for part_type, content in parts:
        if part_type == 'text':
            # 일반 텍스트 삽입
            hwp.insert_text(content)
        elif part_type == 'math':
            # LaTeX 수식을 MathML로 변환 (외부 라이브러리 사용)
            mathml_content = latex_to_mathml(content)
            # 임시 MathML 파일 생성
            temp_mml_path = create_temp_mathml_file(mathml_content)
            # HWP에 수식 삽입
            hwp.import_mathml(temp_mml_path)
```

#### 3. 완전한 구현 예시

```python
def process_math_problem(problem_text):
    hwp = Hwp()
    
    # 문제 번호와 본문 분리
    lines = problem_text.strip().split('\n')
    
    for line in lines:
        if line.strip():
            parts = parse_latex_content(line)
            
            for part_type, content in parts:
                if part_type == 'text':
                    hwp.insert_text(content)
                elif part_type == 'math':
                    # LaTeX → MathML 변환 후 삽입
                    mathml_file = convert_and_save_mathml(content)
                    hwp.import_mathml(mathml_file)
            
            # 줄바꿈
            hwp.BreakPara()
    
    return hwp
```

### 주요 고려사항

1. **순차 처리**: 텍스트와 수식을 문서 순서대로 처리해야 합니다
2. **MathML 변환**: LaTeX 수식을 MathML로 변환하는 별도 라이브러리 필요 (예: `latex2mathml`)
3. **임시 파일 관리**: MathML 파일을 임시로 생성하고 정리하는 과정 필요
4. **수식 컨트롤**: pyhwpx는 수식 컨트롤을 "eqed" ID로 식별하며, 이를 통해 삽입된 수식들을 나중에 관리할 수 있습니다