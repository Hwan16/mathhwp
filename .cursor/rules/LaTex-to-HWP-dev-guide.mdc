---
description: 
globs: 
alwaysApply: true
---
---
description: "'LaTex to HWP 변환기' 파이썬 프로젝트 개발 가이드"
type: Always
---

### ## AI 행동 지침
- 너는 나의 '코딩 파트너'로서, 내가 새로운 작업을 요청하면 가장 먼저 이 규칙 파일의 전체 내용을 다시 확인하여 맥락을 파악한 후 작업을 시작해야 한다.
- 아래 '단계별 개발 체크리스트'는 우리의 진행 상황을 나타낸다. 우리가 함께 작업을 완료하면, 너는 이 파일의 해당 항목을 `- [x]`와 같이 완료 상태로 직접 수정해야 한다.
- 개발 중 궁금한 점이나 핵심 변환 로직에 대한 아이디어가 필요할 때는 `@latex-hwp-qna.mdc` 파일에 정리된 Q&A를 참고하여 답변을 구성해 줘.
- 입력 데이터를 처리하는 코드를 작성할 때는, `@input-spec.mdc` 파일에 명시된 JSON 데이터 구조를 반드시 참고해야 한다.

---

# LaTex to HWP 변환기 개발 규칙 (Rules for Development)

## 제품 요구사항 정의서 (PRD)

### 제품 개요
* **제품명:** LaTex to HWP 변환기 (가칭)
* **제품 요약:** 특정 JSON 형식의 파일을 입력받아, 그 안에 포함된 LaTeX 수식과 텍스트를 한/글(HWPX) 네이티브 수식과 텍스트로 자동 변환하여, 한/글 문서(.hwpx)로 저장해주는 윈도우 데스크톱 애플리케이션.
* **타겟 고객:**
    * LaTeX 형식으로 작성된 수학 문제, 논문 초고 등을 한/글 문서로 변환해야 하는 교사, 조교, 연구원
    * 수식 입력이 많은 보고서를 작성하는 학생 및 직장인

### 프로젝트 목표
* **사용자 편의성:** 복잡한 '복사-붙여넣기'나 수동 변환 작업 없이, 버튼 클릭 몇 번으로 변환 과정을 완료하여 문서 작업 생산성을 획기적으로 향상시킨다.
* **높은 변환 정확도:** 일반 텍스트(한글, 영어 등)는 그대로 유지하고, LaTeX 수식은 형태나 내용의 누락 없이 99% 이상의 정확도로 HWP 수식으로 변환한다.
* **안정적인 프로그램:** 사용자가 개인 PC(윈도우)에 쉽게 설치하고 안정적으로 사용할 수 있는 단일 실행 파일(.exe)을 제공한다.

### 기능 요구사항 (Features)

#### 핵심 기능
1.  **JSON 파일 입력:**
    * 사용자가 변환할 데이터가 담긴 `.json` 파일을 불러올 수 있는 '파일 열기' 기능을 제공한다.
2.  **JSON 파싱 및 변환:**
    * 불러온 JSON 파일의 유효성을 검사하고, `problems` 배열을 순회한다.
    * 각 문제 객(object)에서 `latex_string` 값을 추출한다.
    * 추출된 `latex_string` 내에서 일반 텍스트와 LaTeX 수식(`\(...\)`)을 분리(파싱)한다.
    * 분리된 LaTeX 수식을 내부적으로 MathML 형식으로 변환한다.
    * 일반 텍스트와 변환된 수식(MathML)을 조합하여 HWPX 문서 객체를 순서대로 생성한다.
3.  **HWPX 파일로 저장:**
    * 변환된 내용을 사용자가 원하는 위치와 파일명으로 `.hwpx` 파일로 저장하는 기능 제공.
    * 변환 완료 후 "저장이 완료되었습니다."와 같은 명확한 피드백 메시지 표시.

#### 사용자 인터페이스 (UI/UX)
* 직관적인 단일 창 인터페이스 ('JSON 파일 열기' 버튼, '변환 및 저장' 버튼, 진행 상태 표시줄 등).
* 변환 작업 중 프로그램이 멈추지 않도록(UI 프리징 방지) 백그라운드에서 변환 프로세스 진행.
* 변환 과정 중 발생할 수 있는 오류(예: 잘못된 JSON 형식, 파일 없음)에 대한 간단한 알림 기능.

### 기술 사양 (Technical Specifications)
* **프로그래밍 언어:** **Python 3.10 이상**
* **핵심 라이브러리:**
    * **HWP 생성:** **`pyhwpx`**
    * **LaTeX → MathML 변환:** **`latex2mathml`**
    * **GUI 프레임워크:** **`PySide6`** (현대적이고 전문적인 UI 제공)
    * **정규식 처리:** `re` (Python 기본 라이브러리)
* **대상 운영체제:** **Windows 10, Windows 11**
* **배포 방식:** **`PyInstaller`**를 사용하여 모든 종속성을 포함한 단일 실행 파일(.exe)로 패키징. (필요시 `NSIS` 등으로 설치 마법사 제작)

### 제약 조건 및 가정
* **출력 형식:** 이 프로그램은 HWPX 형식으로만 저장을 지원한다. (구형 HWP 형식 미지원)
* **변환 의존성:** LaTeX-to-MathML 변환은 `latex2mathml` 라이브러리의 성능에 의존하며, 매우 복잡하거나 비표준적인 LaTeX 매크로는 지원되지 않을 수 있다.
* **인터넷 연결:** 최초 프로그램 설치 및 라이브러리 설치 시 인터넷 연결이 필요하다.

---

## 단계별 개발 체크리스트

### 0단계: 개발 환경 설정
-   [ ] **Python 설치:** Python 3.10 이상 버전 설치 및 환경 변수(PATH) 설정
-   [ ] **가상 환경 생성:** 프로젝트 폴더 생성 후, `venv`를 사용하여 독립된 가상 환경 구축 (`python -m venv venv`)
-   [ ] **핵심 라이브러리 설치:** 가상 환경 활성화 후, 필요한 라이브러리 설치
    ```bash
    pip install pyhwpx latex2mathml PySide6 pyinstaller
    ```

### 1단계: 핵심 변환 로직 개발 (백엔드)
-   [ ] **1-1. 텍스트 파싱 기능 구현:**
    * **라이브러리:** `re` (정규식)
    * **핵심 액션:** 입력된 전체 텍스트를 "일반 텍스트"와 "LaTeX 수식" 조각으로 분리하는 함수 작성. (예: `split_text_and_latex(full_text)`)
-   [ ] **1-2. LaTeX 수식 → MathML 변환 기능 구현:**
    * **라이브러리:** `latex2mathml`
    * **핵심 액션:** 입력된 LaTeX 문자열(예: `\frac{a}{b}`)을 MathML XML 문자열로 변환하는 함수 작성. (`convert_latex_to_mathml(latex_string)`)
-   [ ] **1-3. HWPX 문서 생성 및 조립 기능 구현:**
    * **라이브러리:** `pyhwpx`
    * **핵심 액션:** 파싱된 조각들을 순회하며, 일반 텍스트는 `hwp.put_text()`로, MathML로 변환된 수식은 `hwp.import_mathml()`로 HWPX 문서에 순서대로 삽입하는 함수 작성.
-   [ ] **1-4. 통합 테스트:**
    * **핵심 액션:** 위 3가지 기능을 합쳐, 샘플 텍스트 파일을 읽어 `.hwpx` 파일로 정상 저장되는지 터미널/콘솔 환경에서 테스트 및 디버깅.

### 2단계: 사용자 인터페이스(GUI) 개발 (프론트엔드)
-   [ ] **2-1. 기본 창 디자인:**
    * **라이브러리:** `PySide6`
    * **핵심 액션:** 메인 윈도우 생성. `QTextEdit`(텍스트 입력창), `QPushButton`(버튼) 등 위젯 배치.
-   [ ] **2-2. 위젯 기능 연결 (시그널/슬롯):**
    * **핵심 액션:** '파일 열기' 버튼 클릭 시 파일 탐색기 열기, '변환 및 저장' 버튼 클릭 시 파일 저장 탐색기 열기 기능 구현.
    * 사용자가 입력한 텍스트나 파일 경로를 가져오는 로직 작성.

### 3단계: 백엔드 로직과 GUI 연동
-   [ ] **3-1. 변환 버튼에 핵심 로직 연결:**
    * **핵심 액션:** '변환 및 저장' 버튼을 누르면, **1단계**에서 만든 핵심 변환 로직(파싱→변환→조립)이 실행되도록 연결.
-   [ ] **3-2. UI 프리징 방지 (스레딩):**
    * **라이브러리:** `PySide6`의 `QThread`
    * **핵심 액션:** 변환 작업이 실행되는 동안 UI가 멈추지 않도록, 변환 로직을 별도의 스레드에서 실행.
-   [ ] **3-3. 피드백 구현:**
    * **핵심 액션:** 변환이 시작되면 "변환 중..." 메시지나 비활성화된 버튼 표시. 완료되면 `QMessageBox`를 통해 "성공적으로 저장되었습니다." 알림 창 표시. 오류 발생 시 오류 메시지 표시.

### 4단계: 패키징 및 배포
-   [ ] **4-1. 실행 파일(.exe) 생성:**
    * **라이브러리:** `PyInstaller`
    * **핵심 액션:** `pyinstaller your_script.py --onefile --windowed` 와 같은 명령어를 사용하여 모든 종속성이 포함된 단일 `.exe` 파일 생성.
-   [ ] **4-2. 아이콘 및 메타데이터 설정:**
    * **핵심 액션:** 프로그램의 아이콘(.ico)을 지정하고, 파일 버전, 제품 이름 등의 메타데이터를 포함하여 `PyInstaller` 빌드.
-   [ ] **4-3. (선택) 설치 파일 생성:**
    * **툴:** `NSIS`, `Inno Setup` 등
    * **핵심 액션:** 생성된 `.exe` 파일을 바탕으로 친숙한 형태의 `setup.exe` 설치 마법사 파일 제작.
-   [ ] **4-4. 최종 테스트:**
    * **핵심 액션:** 파이썬이 설치되지 않은 깨끗한 윈도우 환경에서 생성된 `.exe` 파일이 독립적으로 잘 실행되는지 최종 테스트.